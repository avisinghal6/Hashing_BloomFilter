import random;
from sklearn.utils import murmurhash3_32;
import mmh3;
import numpy as np;
from bitarray import bitarray
import math;

# seed=714;
# print(hashfunc(3)(6)); for testing
random.seed(2315); # 789, 1473, 1493, 2315
class BloomFilter():

    def __init__(self,n,fp_rate):
        self.count=0;
        self.hashseed=random.randint(1,500);
        # print(self.hashseed);
        # self.seed=[random.randint(100,5000) for i in range (1000)]; #storing 1000 seed values and then using as necessary
        # self.seed=[4738, 714, 2714, 4062, 2860, 3336, 1204, 3049, 489, 2560, 899, 2872, 4814, 1269, 3534, 907, 4191, 3852, 3073, 337, 4588, 2751, 558, 4816, 2812, 1116, 2808, 2490, 4088, 3101, 766, 1959, 3224, 198, 4576, 3589, 2115, 2144, 1052, 2178, 2184, 1358, 4905, 2507, 733, 4271, 1274, 3838, 2469, 651, 1496, 1716, 1361, 1906, 4276, 4204, 311, 1197, 2367, 312, 699, 1639, 830, 3932, 1027, 1316, 2023, 3014, 4598, 4470, 1512, 3921, 3206, 3398, 1270, 3992, 3770, 3921, 4161, 645, 316, 3483, 1832, 710, 1923, 1772, 331, 1059, 1598, 152, 3104, 3641, 4776, 4746, 1320, 4995, 4339, 107, 3105, 3013, 887, 2926, 3217, 3656, 4535, 3193, 4566, 1454, 896, 3683, 235, 2059, 1418, 2304, 4546, 1462, 2194, 3349, 2254, 4897, 3091, 4104, 257, 844, 794, 2734, 2962, 4686, 4198, 2980, 1927, 3660, 1907, 1188, 3985, 4039, 2063, 4848, 3190, 3933, 3362, 3659, 4490, 661, 2097, 3893, 1870, 3754, 2337, 1864, 3639, 106, 345, 714, 4058, 3500, 3130, 2387, 276, 4695, 934, 2514, 1229, 1592, 4014, 4542, 4173, 1675, 803, 2060, 1323, 1156, 4834, 4399, 331, 2047, 2028, 486, 1926, 592, 2922, 3940, 3620, 2488, 4118, 4556, 2951, 3675, 3191, 2223, 3744, 4979, 2837, 4689, 2320, 3182, 1307, 3795, 484, 4529, 710, 4467, 4898, 4505, 3305, 2605, 518, 2990, 586, 771, 4147, 2416, 473, 1405, 432, 750, 3119, 2998, 4141, 3102, 2339, 168, 2796, 1318, 2844, 1920, 4557, 3254, 1881, 1533, 3588, 623, 3045, 3384, 2687, 1662, 4662, 4740, 3443, 475, 527, 1151, 1645, 3251, 4262, 4930, 1121, 4456, 2037, 4534, 217, 1732, 718, 3449, 4531, 4873, 983, 3810, 529, 1544, 500, 2516, 1003, 3367, 722, 469, 2709, 4033, 1428, 4183, 1696, 3092, 1770, 4632, 3988, 1453, 4994, 2097, 690, 3158, 3880, 4019, 1056, 3281, 1058, 1042, 941, 4971, 3546, 4867, 897, 1697, 557, 2559, 2426, 2917, 744, 2516, 3672, 544, 3248, 902, 3545, 4997, 547, 1006, 1286, 1149, 1921, 2409, 4597, 4560, 650, 2107, 2677, 4890, 4142, 1646, 2644, 227, 4089, 205, 2572, 1865, 3191, 3903, 4307, 2166, 3876, 1703, 311, 2041, 4027, 1795, 2470, 3603, 360, 4725, 2257, 1399, 4940, 944, 3627, 4714, 4060, 1970, 1651, 3672, 4743, 3111, 1422, 589, 4892, 1505, 1041, 2450, 4977, 1554, 4180, 4690, 3552, 2970, 3332, 3721, 3694, 4928, 629, 1128, 4642, 1864, 1933, 1125, 3776, 622, 2331, 3263, 3907, 1396, 4107, 2625, 111, 1345, 1600, 1520, 2017, 1969, 480, 2970, 329, 3271, 3159, 4516, 1703, 1194, 661, 4211, 4868, 3840, 832, 1236, 925, 4315, 535, 2553, 536, 484, 1047, 2227, 416, 2404, 2050, 3846, 4108, 2940, 1916, 1655, 4162, 2720, 341, 3241, 583, 3259, 1391, 4805, 3010, 4275, 2751, 4375, 3055, 2215, 1862, 1802, 4560, 3575, 290, 1055, 2862, 3272, 1604, 2556, 1399, 3115, 1550, 659, 3490, 3784, 548, 4140, 3411, 1032, 3603, 608, 4932, 826, 4883, 778, 459, 2833, 1580, 4856, 4664, 811, 1419, 4423, 4265, 2213, 1425, 1941, 548, 2403, 3686, 2051, 109, 3972, 339, 3026, 2181, 4431, 2342, 4242, 4893, 432, 4858, 2394, 3091, 4395, 2142, 3395, 4416, 3329, 1595, 1977, 3456, 3497, 1574, 3143, 4001, 3514, 1214, 3326, 1937, 4595, 4608, 1872, 2116, 2305, 2954, 4882, 3017, 2038, 551, 3566, 702, 268, 273, 1426, 1411, 278, 2694, 2257, 3357, 2772, 153, 1094, 1385, 2748, 2598, 556, 2637, 2833, 475, 443, 3466, 295, 1238, 959, 136, 162, 4002, 4321, 1599, 2013, 2754, 4710, 933, 2589, 2726, 4905, 1929, 1696, 4645, 4758, 3387, 1270, 2472, 2588, 4630, 2465, 1627, 1034, 1712, 1454, 3568, 3274, 2369, 3995, 381, 534, 388, 2053, 580, 276, 2586, 2358, 3957, 3837, 700, 2118, 1585, 1962, 591, 2092, 1120, 676, 1982, 524, 3613, 1386, 1480, 868, 2642, 1296, 469, 2273, 1713, 3590, 507, 1290, 4701, 836, 4510, 2725, 3686, 4312, 4788, 1087, 582, 142, 3208, 4397, 4361, 1920, 4993, 3020, 755, 679, 2912, 3154, 4269, 3143, 4292, 4045, 4131, 1011, 2582, 4212, 3448, 3839, 841, 3585, 184, 3984, 4703, 1681, 2459, 1115, 3995, 285, 3592, 955, 1429, 177, 3615, 658, 379, 2920, 312, 323, 282, 3021, 785, 4588, 413, 3749, 642, 3194, 3917, 1584, 336, 2212, 196, 3152, 1221, 2854, 414, 4959, 1081, 628, 2125, 238, 1201, 2581, 1921, 154, 4399, 4506, 4406, 2415, 3881, 2565, 2930, 3192, 3259, 4012, 723, 617, 4158, 2986, 2429, 4873, 579, 294, 1714, 1741, 1599, 4156, 2052, 3183, 1718, 4185, 2166, 1661, 3543, 130, 2411, 3557, 3661, 3492, 2191, 3185, 3667, 1203, 2529, 3498, 2067, 4975, 2668, 369, 749, 2924, 2907, 190, 302, 2739, 3560, 3394, 869, 297, 4891, 4331, 786, 1490, 1216, 1582, 1866, 1029, 2489, 4592, 1985, 2701, 2308, 4106, 2674, 1051, 1941, 4798, 914, 4900, 2003, 1363, 4573, 2597, 2051, 4576, 1179, 438, 4307, 4812, 3620, 2444, 4104, 1766, 2329, 1195, 1524, 4633, 750, 2038, 2214, 553, 3580, 2975, 1346, 4057, 3810, 2924, 1820, 3196, 576, 2761, 1168, 2711, 4852, 3204, 4087, 3995, 1159, 2513, 3154, 1397, 4913, 4243, 4032, 4587, 1816, 4034, 2385, 4921, 368, 3171, 2948, 2958, 833, 174, 1174, 517, 283, 4237, 2153, 713, 2480, 2632, 3494, 4859, 3964, 910, 2693, 2860, 3427, 2125, 506, 4675, 1787, 3271, 2348, 2166, 2466, 4520, 2944, 1181, 4499, 4796, 956, 2849, 3641, 700, 1033, 3715, 4772, 3548, 824, 3097, 1028, 3780, 1597, 4326, 3485, 4802, 3514, 3331, 3935, 1819, 917, 984, 3505, 4267, 3098, 3538, 1544, 1721, 626, 774, 3015, 2766, 3193, 2272, 3414, 4775, 163, 2942, 4089, 2134, 826, 4265, 1540, 869, 3701, 4835, 3657, 2341, 2238, 1167, 4512, 4914, 1405, 1176, 355, 4750, 4180, 1181, 3557, 2094, 670, 281, 1766, 4725, 3430, 166, 3798, 643, 506, 4376, 605, 3724, 1586, 858, 673, 4251, 1425, 2502, 2523, 2962, 1915, 2361, 2855, 1863, 4216, 4111, 3875, 2517, 3332, 4993, 2448, 3267, 3575, 334, 3217, 1619, 2685, 1592, 4534, 3612, 4527, 4911, 2477, 2120, 1747, 1491, 4346, 995, 4260, 422, 4278, 170, 234, 3563, 767, 2714, 3749, 4599, 3918, 2297, 1860, 1383, 4209, 4644, 1377, 645, 1085, 697, 2898, 3839, 1621, 1635, 4908, 3426, 1904, 206, 1622, 2866, 4461, 4416, 3076, 428, 2198, 4513, 381, 4106, 2767, 639, 2300, 492, 278, 2306, 4386, 3040, 1461, 633, 2995, 2080, 4428, 2413, 1379, 1333, 3560, 4050, 398, 541, 2918, 4701]
        #print(self.seed);
        self.r=round(n*(math.log(fp_rate)/math.log(0.618)));
        for i in range(32):
            if(1<<i > self.r):
                self.r=1<<i; # setting 'r' the size of bitmap as a power of 2
                break;
        self.A=bitarray(self.r);
        self.A.setall(0); # initializing bitarray to 0.
        self.k=math.ceil((self.r/n)*math.log(2));
        self.hash=[];
        for i in range(self.k):
            self.hash.append(self.hashfunc(self.r));

        self.membership=[random.randint(10000,99999) for i in range (n)];
        self.random_membership=[random.choice(self.membership) for i in range (1000)];
        # print(self.random_membership[:5]);

        #insertion
        for i in self.membership :
            for j in range(self.k): 
                self.A[self.hash[j](i)]=1;



    def hashfunc(self,m):
        # a=self.seed[self.count];
        a=self.hashseed+self.count;
        self.count=self.count+1;
        def murmur(x):
            #print(a);
            return murmurhash3_32(x,a) % m ;
        
        return murmur;


    def test(self,x):
        ans=0;
        for i in range(self.k):
            if self.A[self.hash[i](x)]==1 :
                ans+=1;


        # print(ans,self.k);
        if ans==self.k :
            return 1;
        else :
            return 0;


testset=[random.randint(1000,9000) for i in range (1000)];

#False Positive Rate=0.01
bf_obj1=BloomFilter(10000,0.01);
random_membership=bf_obj1.random_membership;
# print(random_membership[:5]);

ans_fp_rate1=0;
for i in testset:
    ans_fp_rate1+=bf_obj1.test(i);

ans_fp_rate1=ans_fp_rate1/1000; 
print("Practical false positive rate achieved =","{0:.8f}".format(ans_fp_rate1),"Chosen value for false positive rate is 0.01");

 #False positive rate 
bf_obj2=BloomFilter(10000,0.001);
random_membership=bf_obj2.random_membership;

ans_fp_rate2=0;
for i in testset:
    ans_fp_rate2+=bf_obj2.test(i);

ans_fp_rate2=ans_fp_rate2/1000;
print("Practical false positive rate achieved =","{0:.8f}".format(ans_fp_rate2),"Chosen value for false positive rate is 0.001");

#False positive rate 
bf_obj3=BloomFilter(10000,0.0001);
random_membership=bf_obj3.random_membership;

ans_fp_rate3=0;
for i in testset:
    ans_fp_rate3+=bf_obj3.test(i);

ans_fp_rate3=ans_fp_rate3/1000; 
print("Practical false positive rate achieved =","{0:.8f}".format(ans_fp_rate3),"Chosen value for false positive rate is 0.0001");